name: CI2222

on: [push, workflow_dispatch]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - name: Download
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
    - name: Extract
      run: Expand-Archive ngrok.zip
    - name: Auth
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
    - name: Enable TS
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0
    - run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
    - run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
    - run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "Uncleluo@2024" -Force)
    - name: Create Tunnel
      id: create_tunnel
      shell: pwsh
      run: |
        $ngrok = Start-Process -FilePath "./ngrok/ngrok.exe" -ArgumentList "tcp 3389" -PassThru
        Start-Sleep -s 20
        $tunnels = Invoke-RestMethod -Method Get -Uri "http://localhost:4040/api/tunnels"
        $public_url = $tunnels.tunnels.public_url
        Write-Host "::set-output name=ngrok_url::$public_url"
        if (-not $public_url) {
          $ngrok.Stop()
          throw "Failed to create ngrok tunnel."
        }
    - name: Get the ngrok tunnel info
      run: echo "The ngrok tunnel URL is ${{ steps.create_tunnel.outputs.ngrok_url }}"
